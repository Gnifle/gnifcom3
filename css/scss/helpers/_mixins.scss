//	1. SIZE
//-------------------------------------------------------------------------------------------------------------|

	// Set a width and a height of an element. If only 1 variable is passed,
	// height will be set to the value of width

	@mixin size($width, $height: $width) {
		width:	$width;
		height: $height;
	}


//	2. POSITION
//-------------------------------------------------------------------------------------------------------------|

	// Set an elements position property as well as top, right, bottom and left.

	@mixin position($position, $args) {
		@each $o in top right bottom left {
			$i: index($args, $o);

			@if $i and $i + 1<= length($args) and type-of(nth($args, $i + 1)) == number  {
				#{$o}: nth($args, $i + 1);
			}
		}

		position: $position;
	}

	@mixin absolute($args) {
		@include position(absolute, $args);
	}

	@mixin fixed($args) {
		@include position(fixed, $args);
	}

	@mixin relative($args) {
		@include position(relative, $args);
	}


//	3. VENDOR
//-------------------------------------------------------------------------------------------------------------|

	// Add vendor prefixes for features not supported in all browsers.
	//
	//  - $property: 	The property to add vendor prefixes for
	//  - $value:		The value for the selected property
	//  - $vendors:		(Optional, default: all) Select specific
	//					vendors to add prefixes for

	@mixin prefix($property, $value, $vendors: webkit moz ms o) {
		@if $vendors {
			@each $vendor in $vendors {
				#{"-" + $vendor + "-" + $property}: #{$value};
			}
		}
		#{$property}: #{$value};
	}

	// Support regular CSS functions (e.g. rotate($deg))

	@mixin transform($value) {
		@include prefix(transform, $value, webkit ms);
	}

	@mixin column-count($value) {
		@include prefix(column-count, $value, webkit moz);
	}


//	4. CLEARFIX
//-------------------------------------------------------------------------------------------------------------|

	// Clearfix for containers with floating elements.
	// Call using '@extend %clearfix;'

	%clearfix {
		*zoom: 1;
		&:before, &:after {
			content: " ";
			display: table;
		}
		&:after {
			clear: both;
		}
	}


//	5. DISABLE SELECTION
//-------------------------------------------------------------------------------------------------------------|

	// Disable selection for an element with all vendor prefixes
	// Call using '@extend %disableSelection;'

	%disableSelection {
		user-select: 					none;
			-webkit-touch-callout: 		none;
			-webkit-user-select: 		none;
			-khtml-user-select: 		none;
			-moz-user-select: 			none;
			-ms-user-select: 			none;
	}


//	6. CENTER HORIZONTALLY
//-------------------------------------------------------------------------------------------------------------|

	// Centers an element horizontally if the container has a
	// defined width property
	// Call using '@extend %centerHorizontally;'

	%centerHorizontally {
		margin-right: 	auto;
		margin-left: 	auto;
	}

//	7. SCROLLBARS
//-------------------------------------------------------------------------------------------------------------|

	%darkScrollbars {
		&::-webkit-scrollbar-track {
			background-color: 	rgba(0, 0, 0, 0.0);
		}

		&::-webkit-scrollbar {
			width: 14px;
			height: 18px;
			background-color: 	transparent;
		}

		&::-webkit-scrollbar-thumb {
			@include 			prefix(box-shadow, (inset -1px -1px 0px rgba(0, 0, 0, 0.0), inset 1px 1px 0px rgba(0, 0, 0, 0.00)), webkit);
			@include 			prefix(border-radius, 3px);
			border: 			4px solid rgba(0, 0, 0, 0);
			background-clip: padding-box;
			-webkit-border-radius: 7px;
			background-color: 	rgba(0, 0, 0, 0.25);
//			@include 			prefix(border-radius, 3px, webkit);
//			background-clip: 	padding-box;
//			border:				3px solid rgba(0, 0, 0, 0.0);
//			background: 		rgba(0, 0, 0, 0.25);
		}
	}

//	8. MIN-SIZE
//-------------------------------------------------------------------------------------------------------------|

	// Set a width and a height of an element. If only 1 variable is passed,
	// height will be set to the value of width

	@mixin min-size($min-width, $min-height: $min-width) {
		min-width:	$min-width;
		min-height: $min-height;
	}
